{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport TreeSelectContext from './TreeSelectContext';\nimport LegacyContext from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useRefFunc from './hooks/useRefFunc';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple; // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1];\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    });\n    var rawDisplayValues = convert2LabelValues(values);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect\n    };\n  }, [virtual, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;","map":{"version":3,"names":["_extends","_toConsumableArray","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","React","BaseSelect","conductCheck","useId","useMergedState","OptionList","TreeNode","formatStrategyValues","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","TreeSelectContext","LegacyContext","useTreeData","toArray","fillFieldNames","isNil","useCache","useRefFunc","useDataEntities","fillAdditionalInfo","fillLegacyProps","useCheckedKeys","useFilterTreeData","warningProps","warning","isRawValue","value","TreeSelect","forwardRef","props","ref","id","_props$prefixCls","prefixCls","defaultValue","onChange","onSelect","onDeselect","searchValue","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","filterTreeNode","_props$treeNodeFilter","treeNodeFilterProp","_props$showCheckedStr","showCheckedStrategy","treeNodeLabelProp","multiple","treeCheckable","treeCheckStrictly","labelInValue","fieldNames","treeDataSimpleMode","treeData","children","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","onDropdownVisibleChange","treeLine","treeIcon","showTreeIcon","switcherIcon","treeMotion","restProps","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","process","env","NODE_ENV","mergedFieldNames","useMemo","JSON","stringify","_useMergedState","undefined","postState","search","_useMergedState2","mergedSearchValue","setSearchValue","onInternalSearch","searchText","mergedTreeData","_useDataEntities","keyEntities","valueEntities","splitRawValues","useCallback","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","titleList","_title","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","rawLabel","label","rawValue","rawHalfChecked","halfChecked","rawDisabled","entity","get","_rawLabel","node","disabled","_useMergedState3","_useMergedState4","internalValue","setInternalValue","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawLabeledValues","rawHalfLabeledValues","rawValues","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_keyEntities$key$node","_keyEntities$key","_keyEntities$key$node2","rawDisplayValues","firstVal","_item$label","_useCache","_useCache2","cachedDisplayValues","triggerChange","extra","source","labeledValues","eventValues","formattedKeyList","_ref","triggerValue","selected","returnRawValues","halfValues","filter","includes","concat","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","checkedKeys","_conductCheck","_conductCheck2","halfCheckedKeys","onInternalDropdownVisibleChange","open","legacyParam","Object","defineProperty","onDisplayValuesChange","newValues","info","type","treeSelectContext","legacyContext","checkable","createElement","Provider","mode","emptyOptions","displayName","GenericTreeSelect"],"sources":["/project/React-Flow-Automation/node_modules/rc-tree-select/es/TreeSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"virtual\", \"listHeight\", \"listItemHeight\", \"onDropdownVisibleChange\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\"];\nimport * as React from 'react';\nimport { BaseSelect } from 'rc-select';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useId from \"rc-select/es/hooks/useId\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { formatStrategyValues, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport TreeSelectContext from './TreeSelectContext';\nimport LegacyContext from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useRefFunc from './hooks/useRefFunc';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport warning from \"rc-util/es/warning\";\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_CHILD : _props$showCheckedStr,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple; // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1];\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, showCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key, _keyEntities$key$node2;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 ? void 0 : (_keyEntities$key$node2 = _keyEntities$key.node) === null || _keyEntities$key$node2 === void 0 ? void 0 : _keyEntities$key$node2[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    });\n    var rawDisplayValues = convert2LabelValues(values);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, convert2LabelValues, showCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, showCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 ? void 0 : onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect\n    };\n  }, [virtual, listHeight, listItemHeight, filteredTreeData, mergedFieldNames, onOptionSelect]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;"],"mappings":"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"},"metadata":{},"sourceType":"module"}