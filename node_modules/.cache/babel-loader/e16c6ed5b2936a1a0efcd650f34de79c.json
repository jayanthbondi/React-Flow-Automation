{"ast":null,"code":"export var VALUE_SPLIT = '__RC_CASCADER_SPLIT__';\nexport function toPathKey(value) {\n  return value.join(VALUE_SPLIT);\n}\nexport function toPathKeys(value) {\n  return value.map(toPathKey);\n}\nexport function toPathValueStr(pathKey) {\n  return pathKey.split(VALUE_SPLIT);\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var val = value || 'value';\n  return {\n    label: label || 'label',\n    value: val,\n    key: val,\n    children: children || 'children'\n  };\n}\nexport function isLeaf(option, fieldNames) {\n  var _option$isLeaf, _option$fieldNames$ch;\n\n  return (_option$isLeaf = option.isLeaf) !== null && _option$isLeaf !== void 0 ? _option$isLeaf : !((_option$fieldNames$ch = option[fieldNames.children]) === null || _option$fieldNames$ch === void 0 ? void 0 : _option$fieldNames$ch.length);\n}","map":{"version":3,"names":["VALUE_SPLIT","toPathKey","value","join","toPathKeys","map","toPathValueStr","pathKey","split","fillFieldNames","fieldNames","_ref","label","children","val","key","isLeaf","option","_option$isLeaf","_option$fieldNames$ch","length"],"sources":["/project/React-Flow-Automation/node_modules/rc-cascader/es/utils/commonUtil.js"],"sourcesContent":["export var VALUE_SPLIT = '__RC_CASCADER_SPLIT__';\nexport function toPathKey(value) {\n  return value.join(VALUE_SPLIT);\n}\nexport function toPathKeys(value) {\n  return value.map(toPathKey);\n}\nexport function toPathValueStr(pathKey) {\n  return pathKey.split(VALUE_SPLIT);\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      label = _ref.label,\n      value = _ref.value,\n      children = _ref.children;\n\n  var val = value || 'value';\n  return {\n    label: label || 'label',\n    value: val,\n    key: val,\n    children: children || 'children'\n  };\n}\nexport function isLeaf(option, fieldNames) {\n  var _option$isLeaf, _option$fieldNames$ch;\n\n  return (_option$isLeaf = option.isLeaf) !== null && _option$isLeaf !== void 0 ? _option$isLeaf : !((_option$fieldNames$ch = option[fieldNames.children]) === null || _option$fieldNames$ch === void 0 ? void 0 : _option$fieldNames$ch.length);\n}"],"mappings":"AAAA,OAAO,IAAIA,WAAW,GAAG,uBAAlB;AACP,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAC/B,OAAOA,KAAK,CAACC,IAAN,CAAWH,WAAX,CAAP;AACD;AACD,OAAO,SAASI,UAAT,CAAoBF,KAApB,EAA2B;EAChC,OAAOA,KAAK,CAACG,GAAN,CAAUJ,SAAV,CAAP;AACD;AACD,OAAO,SAASK,cAAT,CAAwBC,OAAxB,EAAiC;EACtC,OAAOA,OAAO,CAACC,KAAR,CAAcR,WAAd,CAAP;AACD;AACD,OAAO,SAASS,cAAT,CAAwBC,UAAxB,EAAoC;EACzC,IAAIC,IAAI,GAAGD,UAAU,IAAI,EAAzB;EAAA,IACIE,KAAK,GAAGD,IAAI,CAACC,KADjB;EAAA,IAEIV,KAAK,GAAGS,IAAI,CAACT,KAFjB;EAAA,IAGIW,QAAQ,GAAGF,IAAI,CAACE,QAHpB;;EAKA,IAAIC,GAAG,GAAGZ,KAAK,IAAI,OAAnB;EACA,OAAO;IACLU,KAAK,EAAEA,KAAK,IAAI,OADX;IAELV,KAAK,EAAEY,GAFF;IAGLC,GAAG,EAAED,GAHA;IAILD,QAAQ,EAAEA,QAAQ,IAAI;EAJjB,CAAP;AAMD;AACD,OAAO,SAASG,MAAT,CAAgBC,MAAhB,EAAwBP,UAAxB,EAAoC;EACzC,IAAIQ,cAAJ,EAAoBC,qBAApB;;EAEA,OAAO,CAACD,cAAc,GAAGD,MAAM,CAACD,MAAzB,MAAqC,IAArC,IAA6CE,cAAc,KAAK,KAAK,CAArE,GAAyEA,cAAzE,GAA0F,EAAE,CAACC,qBAAqB,GAAGF,MAAM,CAACP,UAAU,CAACG,QAAZ,CAA/B,MAA0D,IAA1D,IAAkEM,qBAAqB,KAAK,KAAK,CAAjG,GAAqG,KAAK,CAA1G,GAA8GA,qBAAqB,CAACC,MAAtI,CAAjG;AACD"},"metadata":{},"sourceType":"module"}